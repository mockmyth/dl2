import tensorflow as tf 
from tensorflow import keras 
from tensorflow.keras import layers 
import matplotlib.pyplot as plt 
import pandas as pd 
# Load dataset from CSV 
data = pd.read_csv('IMDB Dataset.csv')  # Your CSV file path 
from sklearn.model_selection import train_test_split 
# Split into training and testing sets 
x_train, x_test, y_train, y_test = train_test_split(data['review'], 
data['sentiment'], test_size=0.2, random_state=42) 
# Convert 'negative' to 0 and 'positive' to 1 
y_train = y_train.map({'negative': 0, 'positive': 1}) 
y_test = y_test.map({'negative': 0, 'positive': 1}) 
# Ensure labels are integers (optional, already handled by the map 
function) 
y_train = y_train.astype('int') 
y_test = y_test.astype('int') 
# Tokenize the text 
tokenizer = keras.preprocessing.text.Tokenizer(num_words=10000) 
tokenizer.fit_on_texts(x_train) 
# Convert text to sequences 
x_train = tokenizer.texts_to_sequences(x_train) 
x_test = tokenizer.texts_to_sequences(x_test) 
# Pad sequences 
x_train = keras.preprocessing.sequence.pad_sequences(x_train, 
maxlen=256) 
x_test = keras.preprocessing.sequence.pad_sequences(x_test, 
maxlen=256) 
# Build the model 
model = keras.Sequential([ 
layers.Embedding(input_dim=10000, output_dim=32), 
layers.GlobalAveragePooling1D(), 
layers.Dense(64, activation='relu'), 
layers.Dense(1, activation='sigmoid')  # Binary classification (0 or 1 
sentiment) 
]) 
# Compile the model 
model.compile(optimizer='adam', loss='binary_crossentropy', 
metrics=['accuracy']) 
# Train the model 
history = model.fit(x_train, y_train, epochs=10, batch_size=512, 
validation_split=0.2, verbose=1) 
# Evaluate the model 
results = model.evaluate(x_test, y_test, verbose=2) 
print(f"\nTest Loss: {results[0]:.4f} | Test Accuracy: {results[1]:.4f}") 
#Plot training & validation accuracy  
plt.plot(history.history['accuracy'], label='train acc')  
plt.plot(history.history['val_accuracy'], label='val acc')  
plt.title('Model Accuracy')  
plt.ylabel('Accuracy')  
plt.xlabel('Epoch')  
plt.legend()  
plt.show()  
 
 
 
 
 
 
 
 
 
 